// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @db.Char(26)
  email           String      @unique @db.VarChar(50)
  name            String      @unique @db.VarChar(32)
  password        String      
  email_verified  DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
  document        Document?
  store           Store?

  @@map("users")
}

model Document {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [user_id], references: [id])
  user_id     String      @unique @db.Char(26)
  fullname    String?     @db.Char(255)
  nik         String?     @db.Char(16)
  photos      String?     @db.VarChar(255)
  verifiedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  @@map("documents")
}

model Store {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [user_id], references: [id])
  user_id     String      @unique @db.Char(26)
  username    String      @unique @db.VarChar(255)
  name        String      @db.VarChar(255)
  photos      String?     @db.VarChar(255)
  description String?     @db.LongText
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  products    Product[]

  @@map("stores")
}

model Admin {
  id              Int         @id @default(autoincrement())
  email           String      @unique @db.VarChar(255)
  name            String      @unique @db.VarChar(255)
  password        String      @db.VarChar(255)
  email_verified  DateTime?
  level           AdminLevel
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?

  @@map("admins")
}

enum AdminLevel {
  cs
  admin
  superadmin
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  slug      String    @db.VarChar(255)
  photos    String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  products  Product[]

  @@map("categories")
}

model Product {
  id            Int       @id @default(autoincrement())
  store         Store     @relation(fields: [store_id], references: [id])
  store_id      Int 
  category      Category  @relation(fields: [category_id], references: [id])
  category_id   Int
  name          String    @db.VarChar(255)
  slug          String    @unique @db.VarChar(255)
  description   String    @db.LongText
  price         Int
  stock         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  images        ProductImages[]

  @@map("products")
}

model ProductImages {
  id            Int       @id @default(autoincrement())
  product       Product   @relation(fields: [product_id], references: [id])
  product_id    Int       
  name          String    @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@map("product_images")
}